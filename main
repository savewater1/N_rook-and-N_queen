#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Sep  2 17:28:38 2018

@author: amits
"""

# Solve the N-Rooks problem or N-queen problem with some positions unavailable!
# The N-rooks problem is: Given an empty NxN chessboard, place N rooks on the board so that no rooks
# can take any other, i.e. such that no two rooks share the same row or column.
# The N-queens problem is: Given an empty NxN chessboard, place N queens on the board so that no queen
# can take any other , i.e., such that no two queens share the same row, column and diagonal 

import sys
import numpy as np


# Return a string with the board rendered in a human-friendly format
def printable_board(board, x):
    return "\n".join([ " ".join([ "R" if board[row][col] == 1 else 'X' if \
                                 [row, col] in unavailable else "_" for col in range (N) ]) for row in range (N)])

# Add a piece to the board at the given position, and return a new board (doesn't change original)
def add_piece(board, row, col):
    ar = board.copy()
    ar[row][col] = 1
    return ar

#Checks if there's a queen attacking the diagonals that pass through [row,col]
def check_diag(board, row, col):
    if (np.add.reduce(board.diagonal(col-row)) != 0) or \
    (np.add.reduce(np.fliplr(board).diagonal(N-1-col-row)) != 0):
        return True
    else:
        return False

# Generates successor states for n-rooks problem 
def successors_nrook(board):
    for r in range(N):
        if np.add.reduce(board[r]) != 0:
            continue
        for c in range(N):
            if np.add.reduce(board.T[c]) != 0 or [r,c] in unavailable :
                continue
            break
        break
    return [add_piece(board, r, c)]

# Generates successor states for n-queens problem
def successors_nqueen(board):
    temp = []
    for r in range(N):
        if np.add.reduce(board[r]) != 0:
            continue
        for c in range(N):
            if np.add.reduce(board.T[c]) != 0 or [r,c] in unavailable or check_diag(board, r, c):
                continue
            temp.append(add_piece(board, r, c))
        break
    return temp
            
# check if board is a goal state
def is_goal(board):
    return np.add.reduce(board, axis = None) == N and \
        np.add.reduce(board, axis = -1).all() and \
        np.add.reduce(board).all()

# Solve n-rooks!
def solve_nrook(initial_board):
    fringe = [initial_board]
    while len(fringe) > 0:
        for s in successors_nrook( fringe.pop(0) ):
            if is_goal(s):
                return(s)
            fringe.append(s)
    return False

#Solve n-queens !
def solve_nqueen(initial_board):
    fringe = [initial_board]
    while len(fringe) > 0:
        for s in successors_nqueen( fringe.pop() ):
            if is_goal(s):
                return(s)   
            fringe.append(s)
    return False


# The variables defined are: prob_type, the type of problem to solve; N, the size of the board; unavailable,
# a list of unavailable positions. These are passed through command line arguments.
prob_type = sys.argv[1]
N = int(sys.argv[2])
unavailable = []

# The variable no_of_unavailable_pos stores the number of position which are unavailable on the board 
# and the rest of system arguments store the pair of row number and column number of positions which are unavailable
no_of_unavailable_pos = int(sys.argv[3])
if (no_of_unavailable_pos!=0):
    unavailable = [[int(sys.argv[i])-1, int(sys.argv[i+1])-1] for i in range(4,4 +  no_of_unavailable_pos*2, 2)]

# The board is stored as a numpy array of shape NxN and dtype = int.
# A zero in a given square indicates no piece, and a 1 indicates a piece.
initial_board = np.zeros((N,N), dtype = 'int')

print ("Starting from initial board:\n" + printable_board(initial_board, None) + "\n\nLooking for solution...\n")
if prob_type == 'nrook':
    solution = solve_nrook(initial_board).tolist()
    print (printable_board(solution, "R") if solution else "Sorry, no solution found. :(" )
if prob_type == 'nqueen':
    if N not in (2,3):
        solution = solve_nqueen(initial_board).tolist()
        print (printable_board(solution, "Q") if solution else "Sorry, no solution found. :(")
    else:
        print('N-queen problem cannot be solved for {0}x{0} board.'.format(N))
